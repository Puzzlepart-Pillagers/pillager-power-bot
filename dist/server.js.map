{"version":3,"sources":["webpack/bootstrap","C:\\code\\acdc\\teams bot\\src\\app\\TeamsAppsComponents.ts","C:\\code\\acdc\\teams bot\\src\\app\\powerPillagerBot\\PowerPillager.ts","C:\\code\\acdc\\teams bot\\src\\app\\powerPillagerBot\\dialogs\\HelpDialog.ts","C:\\code\\acdc\\teams bot\\src\\app\\powerPillagerBot\\dialogs\\WelcomeDialog.ts","C:\\code\\acdc\\teams bot\\src\\app\\server.ts","external \"botbuilder\"","external \"botbuilder-dialogs\"","external \"botbuilder-teams\"","external \"debug\"","external \"dotenv\"","external \"express\"","external \"express-msteams-host\"","external \"http\"","external \"morgan\"","external \"path\""],"names":[],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// Components will be added here\nexport const nonce = {}; // Do not remove!\n// Automatically added for the powerPillagerBot bot\nexport * from \"./powerPillagerBot/PowerPillager\";\n","import { BotDeclaration, IBot } from \"express-msteams-host\";\nimport * as debug from \"debug\";\nimport { DialogSet, DialogState } from \"botbuilder-dialogs\";\nimport { StatePropertyAccessor, CardFactory, TurnContext, MemoryStorage, ConversationState, ActivityTypes } from \"botbuilder\";\nimport HelpDialog from \"./dialogs/HelpDialog\";\nimport WelcomeCard from \"./dialogs/WelcomeDialog\";\nimport { TeamsContext, TeamsActivityProcessor } from \"botbuilder-teams\";\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\n/**\n * Implementation for Power Pillager\n */\n@BotDeclaration(\n    \"/api/messages\",\n    new MemoryStorage(),\n    process.env.MICROSOFT_APP_ID,\n    process.env.MICROSOFT_APP_PASSWORD\n)\n\nexport class PowerPillager implements IBot {\n    private readonly conversationState: ConversationState;\n    private readonly dialogs: DialogSet;\n    private dialogState: StatePropertyAccessor<DialogState>;\n    private readonly activityProc = new TeamsActivityProcessor();\n\n    /**\n     * The constructor\n     * @param conversationState\n     */\n    public constructor(conversationState: ConversationState) {\n        this.conversationState = conversationState;\n        this.dialogState = conversationState.createProperty(\"dialogState\");\n        this.dialogs = new DialogSet(this.dialogState);\n        this.dialogs.add(new HelpDialog(\"help\"));\n\n        // tslint:disable-next-line: no-console\n        console.log(\"################################ IM RUNNING\");\n\n        // Set up the Activity processing\n\n        this.activityProc.messageActivityHandler = {\n            // Incoming messages\n            onMessage: async (context: TurnContext): Promise<void> => {\n                // get the Microsoft Teams context, will be undefined if not in Microsoft Teams\n                const teamsContext: TeamsContext = TeamsContext.from(context);\n\n                // TODO: add your own bot logic in here\n                switch (context.activity.type) {\n                    case ActivityTypes.Message:\n                        const text = teamsContext ?\n                            teamsContext.getActivityTextWithoutMentions().toLowerCase() :\n                            context.activity.text;\n\n                        if (text.startsWith(\"hello\")) {\n                            await context.sendActivity(\"Oh, hello to you as well!\");\n                            return;\n                        }  else if (text.startsWith(\"help\")) {\n                            const dc = await this.dialogs.createContext(context);\n                            await dc.beginDialog(\"help\");\n                        } else {\n                            await context.sendActivity(`I\\'m terribly sorry, but my master hasn\\'t trained me to do anything yet...`);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n\n                // Save state changes\n                return this.conversationState.saveChanges(context);\n            }\n        };\n\n        this.activityProc.conversationUpdateActivityHandler = {\n            onConversationUpdateActivity: async (context: TurnContext): Promise<void> => {\n                if (context.activity.membersAdded && context.activity.membersAdded.length !== 0) {\n                    for (const idx in context.activity.membersAdded) {\n                        if (context.activity.membersAdded[idx].id === context.activity.recipient.id) {\n                            const welcomeCard = CardFactory.adaptiveCard(WelcomeCard);\n                            await context.sendActivity({ attachments: [welcomeCard] });\n                        }\n                    }\n                }\n            }\n        };\n\n        // Message reactions in Microsoft Teams\n        this.activityProc.messageReactionActivityHandler = {\n            onMessageReaction: async (context: TurnContext): Promise<void> => {\n                const added = context.activity.reactionsAdded;\n                if (added && added[0]) {\n                    await context.sendActivity({\n                        textFormat: \"xml\",\n                        text: `That was an interesting reaction (<b>${added[0].type}</b>)`\n                    });\n                }\n            }\n        };\n   }\n\n   /**\n    * The Bot Framework `onTurn` handlder.\n    * The Microsoft Teams middleware for Bot Framework uses a custom activity processor (`TeamsActivityProcessor`)\n    * which is configured in the constructor of this sample\n    */\n   public async onTurn(context: TurnContext): Promise<any> {\n        // transfer the activity to the TeamsActivityProcessor\n        await this.activityProc.processIncomingActivity(context);\n    }\n\n}\n","import { Dialog, DialogContext, DialogTurnResult } from 'botbuilder-dialogs';\n\nexport default class HelpDialog extends Dialog {\n    constructor(dialogId: string) {\n        super(dialogId);\n    }\n\n    public async beginDialog(context: DialogContext, options?: any): Promise<DialogTurnResult> {\n        context.context.sendActivity(`I'm just a friendly but rather stupid bot, and right now I don't have any valuable help for you!`);\n        return await context.endDialog();\n    }\n}\n","const WelcomeCard = require('./WelcomeCard.json');\n\nexport default WelcomeCard;\n","import * as Express from \"express\";\nimport * as http from \"http\";\nimport * as path from \"path\";\nimport * as morgan from \"morgan\";\nimport { MsTeamsApiRouter, MsTeamsPageRouter } from \"express-msteams-host\";\nimport * as debug from \"debug\";\n\n\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\nlog(`Initializing Microsoft Teams Express hosted App...`);\n\n// Initialize dotenv, to use .env file settings if existing\n// tslint:disable-next-line:no-var-requires\nrequire(\"dotenv\").config();\n\n\n\n// The import of components has to be done AFTER the dotenv config\nimport * as allComponents from \"./TeamsAppsComponents\";\n\n// Create the Express webserver\nconst express = Express();\nconst port = process.env.port || process.env.PORT || 3007;\n\n// Inject the raw request body onto the request object\nexpress.use(Express.json({\n    verify: (req, res, buf: Buffer, encoding: string): void => {\n        (req as any).rawBody = buf.toString();\n    }\n}));\nexpress.use(Express.urlencoded({ extended: true }));\n\n// Express configuration\nexpress.set(\"views\", path.join(__dirname, \"/\"));\n\n// Add simple logging\nexpress.use(morgan(\"tiny\"));\n\n// Add /scripts and /assets as static folders\nexpress.use(\"/scripts\", Express.static(path.join(__dirname, \"web/scripts\")));\nexpress.use(\"/assets\", Express.static(path.join(__dirname, \"web/assets\")));\n\n// routing for bots, connectors and incoming web hooks - based on the decorators\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsApiRouter(allComponents));\n\n// routing for pages for tabs and connector configuration\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsPageRouter({\n    root: path.join(__dirname, \"web/\"),\n    components: allComponents\n}));\n\n// Set default web page\nexpress.use(\"/\", Express.static(path.join(__dirname, \"web/\"), {\n    index: \"index.html\"\n}));\n\n// Set the port\nexpress.set(\"port\", port);\n\n// Start the webserver\nhttp.createServer(express).listen(port, () => {\n    log(`Server running on ${port}`);\n});\n","module.exports = require(\"botbuilder\");","module.exports = require(\"botbuilder-dialogs\");","module.exports = require(\"botbuilder-teams\");","module.exports = require(\"debug\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-msteams-host\");","module.exports = require(\"http\");","module.exports = require(\"morgan\");","module.exports = require(\"path\");"],"sourceRoot":""}