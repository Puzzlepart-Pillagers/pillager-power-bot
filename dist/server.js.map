{"version":3,"sources":["webpack:///webpack/bootstrap?7f80","webpack:///external \"express-msteams-host\"?e438","webpack:///external \"botbuilder-dialogs\"?4042","webpack:///./src/app/server.ts?53c8","webpack:///external \"express\"?22fe","webpack:///external \"http\"?8d19","[]","webpack:///external \"morgan\"?3206","webpack:///external \"debug\"?b2c7","webpack:///external \"dotenv\"?e70f","webpack:///./src/app/TeamsAppsComponents.ts?b0db","webpack:///./src/app/powerPillagerBot/PowerPillager.ts?5f2a","webpack:///external \"botbuilder\"?fa14","webpack:///./src/app/powerPillagerBot/dialogs/HelpDialog.ts?47e9","webpack:///./src/app/powerPillagerBot/dialogs/WelcomeDialog.ts?f8da","webpack:///external \"botbuilder-teams\"?cb0c","webpack:///external \"node-fetch\"?5cd5"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","log","debug","config","express","Express","port","process","env","PORT","use","json","verify","req","res","buf","encoding","rawBody","toString","urlencoded","extended","set","path","join","__dirname","morgan","static","MsTeamsApiRouter","allComponents","MsTeamsPageRouter","root","components","index","http","createServer","listen","nonce","fetch","PowerPillager","conversationState","activityProc","TeamsActivityProcessor","commands","this","dialogState","createProperty","dialogs","DialogSet","add","messageActivityHandler","onMessage","context","teamsContext","TeamsContext","from","console","activity","e","errorFeedback","error","sender","getSenderInformation","adapter","type","ActivityTypes","Message","text","getActivityTextWithoutMentions","toLowerCase","messageHandler","Invoke","saveChanges","conversationUpdateActivityHandler","onConversationUpdateActivity","membersAdded","length","idx","id","recipient","welcomeCard","CardFactory","adaptiveCard","sendActivity","attachments","args","trim","split","command","toLocaleLowerCase","indexOf","kings","request","email","arg","response","method","headers","king","contentType","content","version","body","FirstName","LastName","Penning","actions","title","data","addMoney","dc","createContext","beginDialog","activityMembers","getActivityMembers","conversationMembers","getConversationMembers","members","processIncomingActivity","BotDeclaration","MemoryStorage","MICROSOFT_APP_ID","MICROSOFT_APP_PASSWORD","HelpDialog","Dialog","dialogId","super","options","endDialog","WelcomeCard"],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = require(\"express-msteams-host\");","module.exports = require(\"botbuilder-dialogs\");","import * as Express from \"express\";\nimport * as http from \"http\";\nimport * as path from \"path\";\nimport * as morgan from \"morgan\";\nimport { MsTeamsApiRouter, MsTeamsPageRouter } from \"express-msteams-host\";\nimport * as debug from \"debug\";\n\n\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\nlog(`Initializing Microsoft Teams Express hosted App...`);\n\n// Initialize dotenv, to use .env file settings if existing\n// tslint:disable-next-line:no-var-requires\nrequire(\"dotenv\").config();\n\n\n\n// The import of components has to be done AFTER the dotenv config\nimport * as allComponents from \"./TeamsAppsComponents\";\n\n// Create the Express webserver\nconst express = Express();\nconst port = process.env.port || process.env.PORT || 3007;\n\n// Inject the raw request body onto the request object\nexpress.use(Express.json({\n    verify: (req, res, buf: Buffer, encoding: string): void => {\n        (req as any).rawBody = buf.toString();\n    }\n}));\nexpress.use(Express.urlencoded({ extended: true }));\n\n// Express configuration\nexpress.set(\"views\", path.join(__dirname, \"/\"));\n\n// Add simple logging\nexpress.use(morgan(\"tiny\"));\n\n// Add /scripts and /assets as static folders\nexpress.use(\"/scripts\", Express.static(path.join(__dirname, \"web/scripts\")));\nexpress.use(\"/assets\", Express.static(path.join(__dirname, \"web/assets\")));\n\n// routing for bots, connectors and incoming web hooks - based on the decorators\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsApiRouter(allComponents));\n\n// routing for pages for tabs and connector configuration\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsPageRouter({\n    root: path.join(__dirname, \"web/\"),\n    components: allComponents\n}));\n\n// Set default web page\nexpress.use(\"/\", Express.static(path.join(__dirname, \"web/\"), {\n    index: \"index.html\"\n}));\n\n// Set the port\nexpress.set(\"port\", port);\n\n// Start the webserver\nhttp.createServer(express).listen(port, () => {\n    log(`Server running on ${port}`);\n});\n","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"path\");","module.exports = require(\"morgan\");","module.exports = require(\"debug\");","module.exports = require(\"dotenv\");","// Components will be added here\nexport const nonce = {}; // Do not remove!\n// Automatically added for the powerPillagerBot bot\nexport * from \"./powerPillagerBot/PowerPillager\";\n","import { BotDeclaration, IBot } from \"express-msteams-host\";\nimport { DialogSet, DialogState } from \"botbuilder-dialogs\";\nimport { StatePropertyAccessor, CardFactory, TurnContext, MemoryStorage, ConversationState, ActivityTypes, ChannelAccount, BotAdapter } from \"botbuilder\";\nimport HelpDialog from \"./dialogs/HelpDialog\";\nimport WelcomeCard from \"./dialogs/WelcomeDialog\";\nimport { TeamsContext, TeamsActivityProcessor, TeamsAdapter, TeamsChannelAccount } from \"botbuilder-teams\";\nimport * as AdaptiveCard from 'adaptivecards';\nconst fetch = require('node-fetch');\n\n/**\n * Implementation for Power Pillager\n */\n@BotDeclaration(\n    \"/api/messages\",\n    new MemoryStorage(),\n    process.env.MICROSOFT_APP_ID,\n    process.env.MICROSOFT_APP_PASSWORD\n)\n\nexport class PowerPillager implements IBot {\n    private readonly conversationState: ConversationState;\n    private readonly dialogs: DialogSet;\n    private dialogState: StatePropertyAccessor<DialogState>;\n    private readonly activityProc = new TeamsActivityProcessor();\n    \n    private commands: string[] = [ 'king', 'me', 'stats', 'help', 'man' ];\n    private async messageHandler(text: string, context: TurnContext, sender: TeamsChannelAccount): Promise<void> { \n        let args: string[] = text.trim().split(' ');\n        const command: string = args[0].toLocaleLowerCase();\n        if (this.commands.indexOf(command) !== -1) {\n            switch(command) {\n                case 'me':\n                case 'stats':\n                case 'king': {\n                    let request = { email: sender.email.toLowerCase() };\n                    if (args.indexOf('--user') !== -1) {\n                        const arg = args[args.indexOf('--user') + 1]\n                        if (arg) request.email = arg;\n                    }\n\n                    let kings: any;\n                    try {\n                        const response = await fetch(\n                            `https://pillagers-storage-functions.azurewebsites.net/api/GetKing?email=${request.email}`,\n                            { method: 'GET',  headers: { 'Content-Type': 'application/json' }}\n                        );\n                        kings = await (response as any).json();\n                    } catch(e) {\n                        this.errorFeedback(e, context);\n                        console.error('### error (fetch azure):', e);\n                    }\n\n                    if (kings.value[0]) {\n                        try {\n                            const king = kings.value[0];\n                            await context.sendActivity({\n                                type: 'message',\n                                attachments: [\n                                    {\n                                        contentType: 'application/vnd.microsoft.card.adaptive',\n                                        content: {\n                                            type: 'AdaptiveCard',\n                                            version: '1.0',\n                                            body: [\n                                                { type: 'TextBlock', text: 'King' },\n                                                { type: 'TextBlock', text: `name: ${king.FirstName} ${king.LastName}` },\n                                                { type: 'TextBlock', text: `monies: ${king.Penning} Pennings` }\n                                            ],\n                                            actions: [\n                                                { type: 'Action.Submit', title: 'Give 1000 Pennings', data: { addMoney: '1000' } }\n                                            ]\n                                        }\n                                    }\n                                ]\n                            });\n                        } catch(e) {\n                            this.errorFeedback(e, context);\n                            console.error('### error (adaptiveCard):', e);\n                        }\n                    } else {\n                        await context.sendActivity(`Cannot find a user registred with: <i>${request.email}</i>, registrer at <a href='http://pillagers.no'>pillagers.no<a/>.`)\n                    }\n                    return;\n                }\n                case 'man':\n                case 'help': {\n                    const dc = await this.dialogs.createContext(context);\n                    await dc.beginDialog(\"help\");\n                    return;\n                }\n            }\n        } else {\n            await context.sendActivity(`${command} is not a valid action.`);\n            return;\n        }\n    }\n\n    private async errorFeedback(error: Error, context: TurnContext): Promise<void> {\n        await context.sendActivity(`Something went wrong: ${error}`);\n    }\n\n    public constructor(conversationState: ConversationState) {\n        this.conversationState = conversationState;\n        this.dialogState = conversationState.createProperty(\"dialogState\");\n        this.dialogs = new DialogSet(this.dialogState);\n        this.dialogs.add(new HelpDialog(\"help\"));\n\n        this.activityProc.messageActivityHandler = {\n            onMessage: async (context: TurnContext): Promise<void> => { // NOTE Incoming messages\n                const teamsContext: TeamsContext = TeamsContext.from(context); // NOTE will be undefined outside of teams\n                try {\n                    console.log('### context.activity.value', context.activity.value);\n                } catch(e) { \n                    this.errorFeedback(e, context);\n                    console.error('### error (adaptiveCard):', e); \n                }\n\n                const sender: TeamsChannelAccount = await this.getSenderInformation((context.adapter as TeamsAdapter), context);\n\n                switch (context.activity.type) {\n                    case ActivityTypes.Message:\n                        let text: string = teamsContext ? (\n                            teamsContext.getActivityTextWithoutMentions() ? \n                                teamsContext.getActivityTextWithoutMentions().toLowerCase() : \n                                context.activity.text\n                        ) : context.activity.text;\n                        console.log('### text', text);\n                        if (text) {\n                            await this.messageHandler(text, context, sender);\n                        }\n                        console.log('### - Command finsihed');\n                    case ActivityTypes.Invoke: {\n                        let value = context.activity.value;\n                        if (value) {\n                            // TODO add monies\n                        }\n                    }\n                    default:\n                        break;\n                }\n\n                return this.conversationState.saveChanges(context);\n            }\n        };\n\n        this.activityProc.conversationUpdateActivityHandler = {\n            onConversationUpdateActivity: async (context: TurnContext): Promise<void> => {\n                if (context.activity.membersAdded && context.activity.membersAdded.length !== 0) {\n                    for (const idx in context.activity.membersAdded) {\n                        if (context.activity.membersAdded[idx].id === context.activity.recipient.id) {\n                            const welcomeCard = CardFactory.adaptiveCard(WelcomeCard);\n                            await context.sendActivity({ attachments: [welcomeCard] });\n                        }\n                    }\n                }\n            }\n        };\n   }\n\n   private async getSenderInformation(adapter: TeamsAdapter, context: TurnContext): Promise<TeamsChannelAccount> {\n       const activityMembers: TeamsChannelAccount[] = await adapter.getActivityMembers(context);\n       let conversationMembers: TeamsChannelAccount[] = [];\n       if (!activityMembers) {\n        conversationMembers = await adapter.getConversationMembers(context);\n       }\n\n       const members: TeamsChannelAccount[] = activityMembers ? activityMembers : conversationMembers;\n       if (members[0]) {\n        return members[0] as TeamsChannelAccount;\n       }\n\n       return null;\n   }\n\n   public async onTurn(context: TurnContext): Promise<any> {\n        await this.activityProc.processIncomingActivity(context);\n    }\n\n}\n","module.exports = require(\"botbuilder\");","import { Dialog, DialogContext, DialogTurnResult } from \"botbuilder-dialogs\";\n\nexport default class HelpDialog extends Dialog {\n    constructor(dialogId: string) {\n        super(dialogId);\n    }\n\n    public async beginDialog(context: DialogContext, options?: any): Promise<DialogTurnResult> {\n        context.context.sendActivity(`TODO - help`);\n        return await context.endDialog();\n    }\n}\n","const WelcomeCard = require('./WelcomeCard.json');\n\nexport default WelcomeCard;\n","module.exports = require(\"botbuilder-teams\");","module.exports = require(\"node-fetch\");"],"sourceRoot":""}